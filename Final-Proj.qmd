---
title: "Refugee Crisis in Europe in the 21st Century"
author:
  - name: Jingda Yang, Wendi Chu, Haiyu Xiao, Tingsong Li

execute:
    echo: false
output:
    html_document:
        smooth-scroll: true
    theme:
      light: cosmo

    highlight: zenburn
    toc: true
    toc_depth: 2
    margin-left: 5in
    margin-right: 5in
    pdf_document:
        toc: true
format:
  html:
    embed-resources: true
    code-fold: true
    page-layout: full
    fig-cap-location: bottom

sidebar:
  contents: auto
#reference-location: margin
#citation-location: margin
#bibliography: skeleton.bib
---
### Data Source & Description
[data source](https://popstats.unhcr.org/refugee-statistics/download/)

### Introduction

“Refugee” is still one of the most common words we heard in geopolitical news, even though we are living in a relatively peaceful era. When watching the news about refugees, people are impressed by the sadness that refugees lost their homelands and the pain that they suffered as looking for the asylums. However, only a few people would think of the stress from the countries providing asylums. n a gesture of humanity, many European countries generously open their door and provide asylum for refugees all over the world. In 2015, more than 1.3 million refugees came to the continent to request asylum, which is the most year after World War II. Not only the financial pressure, but the differences in terms of culture and religion between refugees and local residents are also challenging the governments of European countries. Additionally, the situations of refugees from conflicts in Europe such as Ukraine and the Balkans, who also face similar struggles, have been largely ignored, as they are often seen as being from "first-world" countries.

In this project, we will be focusing on two groups of refugees in 21st-century Europe. The first group consists of refugees looking for asylums in Europe, and the second group comprises refugees from European countries who have settled all over the world. Our analysis will include an overview of the origin countries and asylum countries of the refugees, as well as demographic data such as age and gender. We will also investigate the application and approval rates of the refugees seeking asylum in Europe. Furthermore, we will concentrate on two major conflicts that have generated significant refugee populations: the conflicts between Ukraine and Russia, as well as the Balkan conflicts. 

### Overall Gendered Refugee Populations by Country of Asylum
```{python}
import pandas as pd
import numpy as np
import plotly.express as px
import pycountry
import pycountry_convert
import plotly.express as px


import plotly.io as pio
pio.renderers.default='plotly_mimetype+notebook_connected'
import altair as alt
from countrygroups import EUROPEAN_UNION

import warnings
warnings.filterwarnings('ignore')
```

```{python}
# | label: fig-map
# | fig-cap: "Origin and asylum of refugees (2002 to 2022)"

import pandas as pd
import plotly.graph_objects as go
import pycountry
from pycountry_convert import country_alpha2_to_continent_code, convert_continent_code_to_continent_name
def iso_to_continent(country_iso):
    try:
        country = pycountry.countries.get(alpha_3=country_iso)
        country_alpha2 = country.alpha_2
        continent_code = country_alpha2_to_continent_code(country_alpha2)
        continent_name = convert_continent_code_to_continent_name(continent_code)
        return continent_name
    except (KeyError, AttributeError):
        return None

df = pd.read_csv("population1.csv")
df = df.dropna(subset=['Country of origin (ISO)', 'Country of asylum (ISO)'])

df['asy_continent'] = df['Country of asylum (ISO)'].apply(iso_to_continent)
df['ori_continent'] = df['Country of origin (ISO)'].apply(iso_to_continent)

df3 = df[df["asy_continent"] == "Europe"]
df4 = df[df["ori_continent"] == "Europe"]

df3 = df3.groupby(["Year","Country of origin (ISO)", "Country of origin", 'ori_continent']).sum().reset_index()
df4 = df4.groupby(["Year","Country of asylum (ISO)", "Country of asylum", 'asy_continent']).sum().reset_index()



df3 = df3[df3["Year"] >= 2002]
df4 = df4[df4["Year"] >= 2002]

df3["text"] = df3["Country of origin"] + '<br>' + \
df3["ori_continent"]


# INITIALIZE GRAPH OBJECT

fig = go.Figure()

list1 = [False] * 46
list1[0] = True

list2 = [False] * 46
list2[23] = True


years = list(range(2002,2023))

# ADD A CHOROPLETH TRACES FOR THE DATA-FRAME

sliders = []
steps = []
i=0

for year in years:
    fig.add_trace(  # Add A trace to the figure
        go.Choropleth(  # Specify the type of the trace
            uid="full-set",  # uid=unique id (Assign an ID to the trace)
            locations=df3.loc[(df3['Year'] == year)]["Country of origin (ISO)"],  # Supply location information tag for mapping
            z=df3.loc[(df3['Year'] == year)]["Refugees under UNHCR's mandate"],  # Data to be color-coded on graph
            colorbar_title="Refugee",  # Title for color-bar
            colorscale = 'Reds',
            text=df3.loc[(df3['Year'] == year)]["Country of origin"],
            visible=False,  # Specify whether or not to make data-visible when rendered
        )
    )

    step = dict(
        label= year,
        method="update",
        args=[{"visible": [False] * 42}],  # layout attribute
    )
    # print(i)
    step["args"][0]["visible"][i] = True  # Toggle i'th trace to "visible"
    steps.append(step)

    i += 1


slider = [dict(
    active=0,
    currentvalue={"prefix": "Year: "},
    pad={"t": 50},
    steps=steps
)]
sliders.append(slider)

# b2
steps = []
for year in years:
    fig.add_trace(  # Add A trace to the figure
        go.Choropleth(  # Specify the type of the trace
            uid="full-set",  # uid=unique id (Assign an ID to the trace)
            locations=df4.loc[(df4['Year'] == year)]["Country of asylum (ISO)"],  # Supply location information tag for mapping
            z=df4.loc[(df4['Year'] == year)]["Refugees under UNHCR's mandate"],  # Data to be color-coded on graph
            colorbar_title="Refugee",  # Title for color-bar
            colorscale = 'Reds',
            text=df4.loc[(df4['Year'] == year)]["Country of asylum"],
            visible=False,  # Specify whether or not to make data-visible when rendered
        )
    )

    step = dict(
        label= year,
        method="update",
        args=[{"visible": [False] * 42}],  # layout attribute
    )
    # print(i)
    step["args"][0]["visible"][i] = True  # Toggle i'th trace to "visible"
    steps.append(step)

    i += 1


slider = [dict(
    active=0,
    currentvalue={"prefix": "Year: "},
    pad={"t": 50},
    steps=steps
)]
sliders.append(slider)


# VARIABLES FOR BUTTON LOCATION
# (SET THESE BY TRIAL AND ERROR) 
button_height = 0.15
x1_loc = 0.32
y1_loc = 1.25



# DROPDOWN MENUS
fig.update_layout(
    title_text='Origin and asylum of refugees (2002 to 2022)',
    # DEFINE A LIST OF THE VARIOUS BUTTONS (STORED AS DICTIONARIES)
    updatemenus=[
        # BUTTON-1: CONTINENTS
        dict(
            # NOTICE THAT THE OPTION ARE A LIST OF DICTIONARIES
            # IMPORTANT: args specifies the key-value pairing for what to change
            buttons=[
                dict(
                    label="Origin",            # LABEL SHOWN TO USER
                    method="update",                    # MODIFICATION TYPE (SEE ABOVE)
                     args=[{"visible": list1}, {"sliders" : sliders[0]}]
                     ),
                dict(
                    label="Asylum",               # LABEL SHOWN TO USER
                    method="update",           # MODIFICATION TYPE (SEE ABOVE)
                     args=[{"visible": list2}, {"sliders" : sliders[1]}]
                     ),  
           
            ],
            # PLACEMENT AND META DATA FOR THE BUTTON
            direction="down",
            showactive=True,  # HIGHLIGHTS ACTIVE DROPDOWN ITEM OR ACTIVE BUTTON IF TRUE
            pad={"r": 10, "t": 10},  # PADDING
            x=x1_loc,  # POSITION
            y=y1_loc,
            xanchor="left",  # ANCHOR POINT
            yanchor="top",
        )
    ]


)





fig.data[0].visible = True
fig.update_layout(sliders=sliders[0])
# SHOW
fig.show()
```

By looking at the choropleth map, we could find that at the beginning of the 21st century, the origin of refugees seeking asylum in Europe is mainly from two areas: the Middle East and the Balkans. The major reason behind the large number of refugees in the Middle East, especially in Iraq is the Iraq war, which started in 2003 when the US-led invasion was carried out. The invasion was prompted by allegations that Iraq had weapons of mass destruction and greatly affected the condition in the Middle East area. The conflicts in the Balkans during the early 21st century were a series of ethnic and political disputes that emerged after the breakup of Yugoslavia in the 1990s. These conflicts resulted in violence and instability in the region with millions of refugees. After 2012, Syria and Ukraine became the main origin of the refugees. In the matter of European asylum, Germany has become the leader of the continent since the early 21st century and France started accepting more refugees after 2012. Many Ukraine refugees moved to Russia, the opponent of the conflict.

```{python}
# read data
demographics = pd.read_csv('./demographics.csv')
decision = pd.read_csv('./asylum-decisions.csv')
df = pd.read_csv("./population.csv")
```

```{python}
demographics = demographics[demographics['Country of origin (ISO)'] != demographics['Country of asylum (ISO)']]
import pandas as pd
import pycountry
from pycountry_convert import country_alpha2_to_continent_code, convert_continent_code_to_continent_name

def iso_to_continent(country_iso):
    try:
        country = pycountry.countries.get(alpha_3=country_iso)
        country_alpha2 = country.alpha_2
        continent_code = country_alpha2_to_continent_code(country_alpha2)
        continent_name = convert_continent_code_to_continent_name(continent_code)
        return continent_name
    except (KeyError, AttributeError):
        return None


#create a new column 'continent' by applying the conversion function to the 'Country of asylum (ISO)' column
demographics['continent'] = demographics['Country of asylum (ISO)'].apply(iso_to_continent)
```


This chart below displays the number of male and female refugees who sought asylum in different countries from different countries of origin. Each bubble represents the total number of refugees who sought asylum in a particular country, with size indicating magnitude. The x-axis represents the number of female refugees, the y-axis represents the number of male refugees, and color represents the continent of the country of asylum. The position of each bubble indicates the country of asylum. 

```{python}
# | label: fig-charts
# | fig-cap: "Gendered Refugee Populations by Country of Asylum"

# aggregate the data by 'Year', 'Country of asylum (ISO)', and 'continent', summing the values for each age group and gender
grouped_data = demographics.groupby(['Year', 'Country of asylum (ISO)', 'continent']).agg({
    'Female 0 - 4': 'sum',
    'Female 5 - 11': 'sum',
    'Female 12 - 17': 'sum',
    'Female 18 - 59': 'sum',
    'Female 60': 'sum',
    'Female total': 'sum',
    'Male 0 - 4': 'sum',
    'Male 5 - 11': 'sum',
    'Male 12 - 17': 'sum',
    'Male 18 - 59': 'sum',
    'Male 60': 'sum',
    'Male total': 'sum',
    'Total': 'sum'
}).reset_index()

# add a new column with country names
grouped_data['Country of asylum'] = grouped_data['Country of asylum (ISO)'].apply(
    lambda x: pycountry.countries.get(alpha_3=x).name)

# create a bubble chart using Plotly Express with a slider for the 'Year' column
fig = px.scatter(grouped_data, x='Female total', y='Male total', size='Total',
                 color='continent', hover_name='Country of asylum', log_x=True, log_y=True,
                 size_max=60, title='Gendered Refugee Populations by Country of Asylum',
                 animation_frame='Year', range_x=[grouped_data['Female total'].min()+1, grouped_data['Female total'].max()],
                 range_y=[grouped_data['Male total'].min()+1, grouped_data['Male total'].max()])

# Show the bubble chart
fig.update_layout(
    margin=dict(l=20, r=100, t=80, b=20),
    xaxis=dict(title='Female Total', autorange=True, title_font={'family': 'Times New Roman', 'size': 16}),
    yaxis=dict(title='Male Total', autorange=True, title_font={'family': 'Times New Roman', 'size': 16}),
    width=1200, height=750,
    title={
        'text': 'Gendered Refugee Populations by Country of Asylum',
        'font': {'family': 'Times New Roman', 'size': 28},
        'x': 0.5,
        'y': 0.95
    },
    legend={
        'title': {'text': 'Continent', 'font': {'family': 'Times New Roman', 'size': 16}},
        'font': {'family': 'Times New Roman', 'size': 14}
    },
)

fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 1000
fig.show()
```

::: {.callout-tip}
## Note

While the data is complete for the total number of people seeking asylum, some rows do not provide separate totals for male and female refugees. In these cases, the Male total adds Female total may not add up to the Total number of refugees.
:::

With the passage of time, the total number of people seeking asylum abroad has been steadily increasing year by year. Men and women tend to seek asylum in roughly equal proportions. Focusing on Europe, it is observed that prior to 2019, the total number of asylum seekers in the region remained relatively stable, with little variation from year to year. However, after 2020, there has been a significant surge in the number of people seeking asylum in Europe.

This increase can be partly attributed to the escalation of conflict between Russia and Ukraine. As the war intensified, thousands of civilians were displaced from their homes, leading many to seek refuge in neighboring European countries. The ongoing confliction has led to widespread devastation and suffering, driving an increasing number of individuals and families to seek safety and stability outside their home countries. The situation has placed additional pressure on European nations to accommodate and support the growing number of asylum seekers fleeing the region's turmoil.

```{python}
df = df.rename(columns={'Country of origin':'origin', 'Country of origin (ISO)':'origin_iso', 'Country of asylum':'asylum', 
                        'Country of asylum (ISO)':'asylum_iso', "Refugees under UNHCR's mandate":'refugees', 
                        'Asylum-seekers':'asylum_seekers', 'IDPs of concern to UNHCR':'idps_of_concern', 
                        'Other people in need of international protection':'need_protect', 'Stateless persons':'stateless',
                        'Host Community':'host', 'Others of concern':'other_of_concern'})
df = df[df.origin != "Unknown "]
df = df[df.Year>=2000]
# df = df[df.refugees>=100]
df = df.reset_index(drop=True)
df_europe = df[(df.asylum_iso).isin(EUROPEAN_UNION)]
df_europe = df_europe.reset_index(drop=True)

df_europe_ori_mean = df_europe.groupby(["origin"], as_index=False).mean()
top_ori = df_europe_ori_mean.sort_values(by='refugees', ascending=False).head(10)
df_europe_ori_year = df_europe.groupby(["origin", "Year"], as_index=False).mean()
df_europe_ori_year = df_europe_ori_year[(df_europe_ori_year.origin).isin(top_ori.origin)]
df_europe_asy_mean = df_europe.groupby(["asylum"], as_index=False).mean()
top_asy = df_europe_asy_mean.sort_values(by='refugees', ascending=False).head(10)
df_europe_asy_year = df_europe.groupby(["asylum", "Year"], as_index=False).mean()
df_europe_asy_year = df_europe_asy_year[(df_europe_asy_year.asylum).isin(top_asy.asylum)]
```

```{python}
# | label: fig-charts1
# | fig-cap: "Origin Countries with Most Refugees Escaped to Europe"
selection = alt.selection_single(fields=["origin"], name="random")
color = alt.condition(selection, alt.value("red"), alt.value("lightgrey"))
bar1 = (alt.Chart(df_europe_ori_mean)
        .mark_bar()
        .encode(x=alt.X("origin:N", sort=alt.EncodingSortField(field="refugees", op="mean", order="descending")),
                y=alt.Y("mean(refugees):Q"),
                color=color
        )
).transform_window(
    rank='rank(refugees)',
    sort=[alt.SortField("refugees", order="descending")]
).transform_filter(
    (alt.datum.rank < 10)
).add_selection(selection)
bar1.title = "Countries with Most Refugees to Europe"


color1 = alt.condition(selection, alt.Color("origin:N"), alt.value("lightgrey"))
line1 = (alt.Chart(df_europe_ori_year)
        .mark_line().encode(
                x=alt.X('Year:O'),
                y=alt.Y("refugees:Q"),
                color=color1
        )
).add_selection(selection)
line1.title = "Numbers of Refugees to Europe Each Year"
line1.encoding.y.title = "Refugees"
alt.hconcat(bar1, line1)
```

```{python}
# | label: fig-charts2
# | fig-cap: "Europe Countries with Most Asylums Hosted"
selection2 = alt.selection_single(fields=["asylum"], name="random")
color2 = alt.condition(selection2, alt.value("red"), alt.value("lightgrey"))
bar2 = (alt.Chart(df_europe_asy_mean)
        .mark_bar()
        .encode(x=alt.X("asylum:N", sort=alt.EncodingSortField(field="refugees", op="mean", order="descending")),
                y=alt.Y("mean(refugees):Q"),
                color=color
        )
).transform_window(
    rank='rank(refugees)',
    sort=[alt.SortField("refugees", order="descending")]
).transform_filter(
    (alt.datum.rank < 10)
).add_selection(selection2)
bar2.title = "European Countries with Most Refugees Accepted"


color3 = alt.condition(selection2, alt.Color("asylum:N"), alt.value("lightgrey"))
line2 = (alt.Chart(df_europe_asy_year)
        .mark_line().encode(
                x=alt.X('Year:O'),
                y=alt.Y("refugees:Q"),
                color=color3
        )
).add_selection(selection2)
line2.title = "Numbers of Refugees to Each Europe Countries Each Year"
line2.encoding.y.title = "Refugees"
alt.hconcat(bar2, line2)
```

### Demographics

TO BE ADDED MORE INFORMATION

### Specific Conflict Study: Conflict between Russia and Ukraine (2014 - 2022)

```{python}
# | label: fig-sunburst
# | fig-cap: "Asylum Countries of Ukraine Refugees from 2014 to 2022"

df = pd.read_csv("population1.csv")

df = df.dropna(subset=['Country of origin (ISO)', 'Country of asylum (ISO)'])

import pycountry
from pycountry_convert import country_alpha2_to_continent_code, convert_continent_code_to_continent_name

def iso_to_continent(country_iso):
    try:
        country = pycountry.countries.get(alpha_3=country_iso)
        country_alpha2 = country.alpha_2
        continent_code = country_alpha2_to_continent_code(country_alpha2)
        continent_name = convert_continent_code_to_continent_name(continent_code)
        return continent_name
    except (KeyError, AttributeError):
        return None
    
#df['orig_continent'] = df['Country of origin (ISO)'].apply(iso_to_continent)
df['asy_continent'] = df['Country of asylum (ISO)'].apply(iso_to_continent)

df = df.dropna()

df2 =df[df["Country of origin (ISO)"]=="UKR"]
df2 = df2[df2["Year"] >= 2014]

df3 = df2.groupby(["Country of asylum", "asy_continent"]).sum().sort_values(by=["Refugees under UNHCR's mandate"], ascending=False)

df4 = df3[df3["Refugees under UNHCR's mandate"] != 0].reset_index()

parents = df4["asy_continent"].tolist()
labels = df4["Country of asylum"].tolist()

values = df4["Refugees under UNHCR's mandate"].tolist()

df = pd.DataFrame({'Labels': labels, 'Parents': parents, 'Values': values})

add_parents = ["Ukraine"]*6+[""]
add_labels = ["Europe", "North America", "South America", "Oceania", "Africa", "Asia", "Ukraine"]
add_values = [6513730, 29476, 1314, 195, 67, 46648, 6591430]
na_values = df["Values"].to_list()
na_labels = df["Labels"].to_list()
na_Parents = df["Parents"].to_list()

import plotly.graph_objects as go

fig =go.Figure(go.Sunburst(
    labels=add_labels+na_labels,
    parents=add_parents+na_Parents,
    values=add_values+na_values,
    branchvalues="total",
))
fig.update_layout(title_text="Asylum Countries of Ukraine Refugees from 2014 to 2022",width=800, height=600)

fig.show()
```

According to the sunburst plot, from 2014 to 2022, 75% of the refugees from Ukraine are settled in Russia, Poland, Germany, and Czech. Only about 1% of refugees settled outside Europe, even though Ukraine is relatively close to Asian countries. In this case, we could conclude that other continents are not willing to share the pressure with Europe whereas Europe accepts a large number of refugees from other continents. There is also an interesting observation that more than one-third of the refugees from Ukraine seeking asylum in Russia,  which is the cause of the deadly conflict. The reason for such a paradox is that Russia is the most significant minority in eastern Ukraine so when the war began in eastern Ukraine, many residents went to Russia to avoid the flames of war.

```{python}
# | label: fig-area
# | fig-cap: "Asylum Countries of Ukraine Refugees from 2014 to 2022"

df3 = df2[df2["Country of asylum"].isin(["Russian Federation", "Poland", "Germany", "Czechia"])]
df4 = df2[~df2["Country of asylum"].isin(["Russian Federation", "Poland", "Germany", "Czechia"])]
df5 = df4.groupby("Year").sum().reset_index()
df5["Country of asylum"] = "Other"
df6 = pd.concat([df3[["Year", "Country of asylum", "Refugees under UNHCR's mandate"]], df5[["Year", "Country of asylum", "Refugees under UNHCR's mandate"]]])

import plotly.express as px
fig = px.area(df6, x="Year", y="Refugees under UNHCR's mandate", color="Country of asylum")
fig.update_layout(title_text="Asylum Countries of Ukraine Refugees from 2014 to 2022")
fig.show()
```

Even though the conflict between Russia and Ukraine started in 2014, most refugees are forced to leave their homes and seek new asylum in 2022. That is because tensions between Russia and Ukraine grew after the former took Crimea in 2014, and throughout the years, various peace talks and ceasefire agreements have been held. However, the situation in the region remains volatile. In 2022, Russian troops crossed Ukraine's border. This led to the largest conflicts in eastern Ukraine since Crimea was occupied by Russia in 2014. 

### Specific Conflict Study: Conflict of Balkans (2002 - 2010)

TO BE ADDED MORE INFORMATION